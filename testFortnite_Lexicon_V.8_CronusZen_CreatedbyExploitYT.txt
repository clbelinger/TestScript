/*		                              

                                   F O R T N I T E  E D I T I O N  L E X I C O N					  	   		  
						   	  T H E  # 1  F O R T N I T E  S C R I P T  W O R L D  W I D E  
						   		  				   V E R S I O N :
						  	   		    		 
					                                     V.8             	   		    		

											      CHANNEL YOUTUBE: 
    
                 - Follow me on my youtube channel: https://www.youtube.com/channel/UCLPFWoE8Vngh4wuuwV4ItdQ
    
                                                   
                                                    MY WEB PAGE:
                                                    
                                             www.exploitytscriptzen.com                
                                                      
                                                      
                                                       SUPPORT:
                              
                                                                                                                                                        
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗         
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝  
                                                                    
						       _____    ___    ____    _____   _   _   ___   _____   _____ 
                              |  ___|  / _ \  |  _ \  |_   _| | \ | | |_ _| |_   _| | ____|
                              | |_    | | | | | |_) |   | |   |  \| |  | |    | |   |  _|  
                              |  _|   | |_| | |  _ <    | |   | |\  |  | |    | |   | |___ 
                              |_|      \___/  |_| \_\   |_|   |_| \_| |___|   |_|   |_____|
                                                              t
							
				                __           __   __            __   __      ___      __        
                          |    |_   \_/  |  /    /  \  |\ |    |_   |  \  |   |   |  /  \  |\ | 
                          |__  |__  / \  |  \__  \__/  | \|    |__  |__/  |   |   |  \__/  | \| 
                                                                      
				                            
				 		 	A  G P C  P O W E R  S C R I P T  F O R  C R O N U S  Z E N  B Y   			
							
						 _______ _     _  _____          _____  _____ _______    __   __ _______
                         |______  \___/  |_____] |      |     |   |      |         \_/      |   
                         |______ _/   \_ |       |_____ |_____| __|__    |          |       |   
                                                                          
						  
						    	 200.000 M I L  D O W N L O A D S  W O R L D  W I D E 
                                                                                                                                                        
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗         
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝  
			     ▄▄▄· ▪  • ▌ ▄ ·.     ▄▄▄ .▐▄• ▄  ▄▄▄·▄▄▌        ▪  ▄▄▄▄▄    ▄▄▌  ▪   ▐ ▄ ▄▄▄ . ▄▄▄· ▄▄▄  
                ▐█ ▀█ ██ ·██ ▐███▪    ▀▄.▀· █▌█▌▪▐█ ▄███•  ▪     ██ •██      ██•  ██ •█▌▐█▀▄.▀·▐█ ▀█ ▀▄ █·
                ▄█▀▀█ ▐█·▐█ ▌▐▌▐█·    ▐▀▀▪▄ ·██·  ██▀·██▪   ▄█▀▄ ▐█· ▐█.▪    ██▪  ▐█·▐█▐▐▌▐▀▀▪▄▄█▀▀█ ▐▀▀▄ 
                ▐█ ▪▐▌▐█▌██ ██▌▐█▌    ▐█▄▄▌▪▐█·█▌▐█▪·•▐█▌▐▌▐█▌.▐▌▐█▌ ▐█▌·    ▐█▌▐▌▐█▌██▐█▌▐█▄▄▌▐█ ▪▐▌▐█•█▌
                 ▀  ▀ ▀▀▀▀▀  █▪▀▀▀     ▀▀▀ •▀▀ ▀▀.▀   .▀▀▀  ▀█▄▀▪▀▀▀ ▀▀▀     .▀▀▀ ▀▀▀▀▀ █▪ ▀▀▀  ▀  ▀ .▀  ▀										
									    
									    L I N E A R  A I M  A S S I S T  
								  
								       		  C R E A T E D  B Y 
										 ╔═╗═╗ ╦╔═╗╦  ╔═╗╦╔╦╗  ╦ ╦╔╦╗
                                         ║╣ ╔╩╦╝╠═╝║  ║ ║║ ║   ╚╦╝ ║ 
                                         ╚═╝╩ ╚═╩  ╩═╝╚═╝╩ ╩    ╩  ╩ 
										   
		"The best aim assist out there for linear, with my new aim assist you won't shake when aiming anymore, 
				            now you stay on target without losing too many battles!"
										   
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗         
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝  
					   
					  
							╦═╗╔═╗╔═╗╔╦╗  ╔╦╗╦ ╦╔═╗  ╦╔╗╔╔═╗╔╦╗╦═╗╦ ╦╔═╗╔╦╗╦╔═╗╔╗╔╔═╗
							╠╦╝║╣ ╠═╣ ║║   ║ ╠═╣║╣   ║║║║╚═╗ ║ ╠╦╝║ ║║   ║ ║║ ║║║║╚═╗
							╩╚═╚═╝╩ ╩═╩╝   ╩ ╩ ╩╚═╝  ╩╝╚╝╚═╝ ╩ ╩╚═╚═╝╚═╝ ╩ ╩╚═╝╝╚╝╚═╝                                                                                              
		                                                                                                                
========================================================================================================================
        /*------------------------------- INSTRUCTIONS PLEASE READ ------------------------------------------
        =====================================================================================================
        Enter Mod Menu                        = hold LT/L2 & press XB1_MENU  
        -----------------------------------------------------------------------------------------------------
        Scroll between MODs  Go back          = XB1_LEFT 
        -----------------------------------------------------------------------------------------------------
        Scroll between MODs  Go forward       = XB1_RIGHT 
        -----------------------------------------------------------------------------------------------------
        Scroll between Options Go back        = XB1_UP 
        -----------------------------------------------------------------------------------------------------
        Scroll between Options Go forward     = XB1_DOWN 
        -----------------------------------------------------------------------------------------------------
        Exit Menu                             = XB1_B 
        -----------------------------------------------------------------------------------------------------
        Enter Edit Menu To Change Values      = XB1_A 
        -----------------------------------------------------------------------------------------------------
        Exit Edit Menu To Mod Menu            = XB1_B
        -----------------------------------------------------------------------------------------------------
        Edit Menu - change values by 1        = hold LT/L2 & press LEFT(decrease by 1)/RIGHT(increase by 1)
        -----------------------------------------------------------------------------------------------------
        Edit Menu - change values by 10       = hold LT/L2 & press DOWN(decrease by 10)/UP(increase by 10)
        -----------------------------------------------------------------------------------------------------
        =====================================================================================================
                                                              ​​​​

███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗         
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝  
								              _              ___
								          ___| |_ ___ ___   |_  |
							             |_ -|  _| -_| . |   _| |_
							             |___|_| |___|  _|  |_____|
							             USER CONFIG |_| IN SCRIPT*/                                        


//Combat Buttons
define FireBtn  = PS4_R2;       // Fire In Game
define AdsBtn   = PS4_L2;       // Ads In Game
define Pickaxe  = PS4_TRIANGLE; // Pickaxe In Game
define N_Weapon = PS4_R1;       // Next Weapon In Game
define P_Weapon = PS4_L1;       // Previous Weapon In Game
define Reload   = PS4_SQUARE;   // Reload In Game
define Jump     = PS4_CROSS;    // Jump In Game
define Crouch   = PS4_R3;       // Crouch In Game

// Build Buttons
define Build    = PS4_CIRCLE;	// Build In Game {Switch/Edit or Switch}
define Switch   = PS4_LEFT;     // Switch In Game {Switch Only} [Used In Builder Pro Mod]
define Wall     = PS4_R2;		// Wall In Game
define Floor    = PS4_R1;		// Floor In Game
define Ramp     = PS4_L2;		// Ramp In Game
define Trap     = PS4_SQUARE;	// Trap In Game
define Roof     = PS4_L1;		// Roof In Game

// Edit Buttons
define Edit     = PS4_CIRCLE;   // Edit In Game (Use This Button If Using HoldTime In Game Or NOT Edit Assist Without Hold Time)
define Select   = PS4_R2;       // Edit Select Piece In Game
define Confirm  = PS4_CIRCLE; 	// Edit Confirm In Game	
define Reset    = PS4_R3;       // Edit Reset In Game

define RY  = PS4_RY;
define RX  = PS4_RX;
define LX  = PS4_LX;
define LY  = PS4_LY;
define On  = TRUE;
define Off = FALSE;


// 🅼🅾🅳 🅱🆄🆃🆃🅾🅽🆂


// Fast Reset & Edit Assist
define FastReset  = PS4_TOUCH; // FAST RESET BUTTON [ MUST BE BLANK IN GAME / OR SOMETHING HARDLY USED!!! ]
define EditAssist = PS4_L3;    // EDIT ASSIST + FAST RESET EDIT BUTTON (Edit In Game [ NO HOLD TIME!!! ])
int EditHold      = Off; // [On / Off] When using edit hold time to edit ( MATCH TO IN GAME SETUP ) [Off = INSTANT PRESS]


//Accuracy 100% 1 Button Toggle On/Off By Default} [!!define "HoldButtonStop" YOU MUST DEFINE THE BUTTON WHICH YOU WILL HAVE TO HOLD SO YOU CAN HEAL YOURSELF.]
define HoldButtonStopAccuracy  = PS4_R3; // <---- You must define the button on which you want to hold so you can heal yourself
//---------------------------------------------------------------------------------------------------------------------------------------------------------------


// Nova condição para ativar/desativar Crouch Shot
if(get_ival(L2) && get_ival(PS4_B))
{
    CrouchShot = !CrouchShot;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~
Crouch Shot Desactive ON/OFF             
-~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
define ToggleHold  = AdsBtn;   // Crouch Shot HOLD TOGGLE 
define TogglePress = PS4_DOWN; // Crouch Shot PRESS TOGGLE

// ... (restante do código)

// ... (parte do código onde o Crouch Shot é utilizado)

if(CrouchShot)
{
    if(get_ival(FireBtn) && !get_ival(HoldButtonStopCrouch))
    {
        combo_run(RapidCrouch);
    }
    else
    {
        combo_stop(RapidCrouch);
    }
}

// Nova condição para ativar/desativar Jump Shot
if(get_ival(L2) && get_ival(PS4_A))
{
    // Ações para realizar o Jump Shot
    combo_run(JumpShotCombo);
}

// ... (restante do código)

// Combo para realizar o Jump Shot
combo JumpShotCombo
{
    set_val(Jump, 100); // Pular
    wait(10); // Ajustar o tempo de espera conforme necessário
    set_val(FireBtn, 100); // Atirar
    wait(10); // Ajustar o tempo de espera conforme necessário
    set_val(Jump, 0); // Parar de pular
}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rapid Fire Desactive ON/OFF             
-~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
define ToggleHoldFire  = AdsBtn; // Rapid Fire HOLD TOGGLE 
define TogglePressFire = PS4_UP; // Rapid Fire PRESS TOGGLE
define RapidFireHip = FALSE;                           
                                
                                
//---Adjustable Variables Count                          
define MAX_MODS_COUNT = 12;                          
int modName_idx; 
//  MODS Toggles ------------------------------------------------
int AI_AimAssist           = 1 ;
int AI_HipAssist           = 1 ;
int HeadShotAssist         = 1 ; 
int NonRecoil       	   = 1 ; 
int StickNoDeriva    	   = 1 ; 
int AccuracyExploit  	   = 1 ;
int BuildTracker           = 1 ;
int QuickEditAssist        = 1 ; 
int InstaEditReset         = 1 ;
int InstaFastReset         = 1 ;
int InstantPickaxe         = 1 ;
int CrouchShot             = 1 ;
int RapidFire              = 1 ;

//===============================================================
//    MODS TEXT TO DISPLAY                                       
//===============================================================
const string AI_AIM_ASSIST  = "   AI Aim Assist  "; 
const string AI_HIP_ASSIST  = "   AI Hip Assist  ";
const string HEADSHOT       = "    Head Assist   "; 
const string ANTIRECOIL     = "    Anti Recoil   "; 
const string DEADZONE       = "  No Deriva Stick ";
const string ACCURACY       = " Accuracy Exploit ";
const string BUILDTRACKER   = "   Build Tracker  ";
const string EDITASSIST     = "    Edit Assist   ";
const string EDITRESET      = "    Edit Reset    ";
const string FASTRESET      = "    Fast Reset    ";
const string INSTANTPICKAXE = " Instant Pickaxe  ";
const string RAPIDCROUCH    = "   Rapid Crouch   ";
const string RAPIDFIRE      = "    Rapid Fire    ";                               


//===============================================================
//                  ADJUSTABLE VARIABLES                                       
//===============================================================

//---Adjustable Variables Count                          
define AMOUNT_OF_VALNAME_IDX = 14; 
int adjust_variable_idx; 
//  Values Toggles ------------------------------------------------                        
int AimStrength;    
int HipAssist_Strength;
int HipAssist_Speed;
int HeadStep;
int HeadMax;
int AR_Ver;
int AR_Horiz;
int DeadZone;
int Spam_Accuracy:
int BuildSyncTime;
int EditDelay;
int EditHoldTime;
int ButtonTime;
int DropShotWait;
int RapidFireHold;
int RapidFireWait;

const string EditVarStr []={ 
 
"  Strength Assist  ",
"   Hip Strength    ",
"    Hip Speed      ",
"    Head Step      ",   
"     Head Max      ",   
"    AR Vertical    ",  
"   AR Horizontal   ", 
"     Dead Zone     ",   
"   Spam_Accuracy   ",   
"   BuildSyncTime   ",
"    Edit Delay     ",
"  Edit Hold Time   ",
"    Button Time    ",
" Rapid Crouch Wait ",
"  Rapid Fire Hold  ",
"  Rapid Fire Wait  "
};

const uint8 Options [] = {
  
 31 ,
  1 ,
 67 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1
};

const uint8 EditVal [] = {
 
  1 , 
  1 ,
  1 ,
  1 , 
  1 , 
  1 , 
  1 , 
  1 ,
  1 ,
  1 ,
  1 ,
  1 ,
  1 
};

const uint8 OptRange [][] = {
    
  { 0 , 0 }, 
  { 1 , 2 },
  { 3 , 4 }, 
  { 5 , 6 }, 
  { 7 , 7 },
  { 8 , 8 }, 
  { 9 , 9 }, 
  {10 ,10 },
  {11 ,11 },
  {12 ,12 },
  {12 ,12 },
  {13 ,13 },
  {14 ,15 }
};

const uint8 Min_Max_Options [][]={ 
  
  { 0 , 2 }, 
  { 0 , 1 }, 
  { 0 , 2 }, 
  { 0 , 1 }, 
  { 0 , 1 }, 
  { 0 , 1 }, 
  { 0 , 1 },
  { 0 , 1 },
  { 0 , 1 },
  { 0 , 1 }, 
  { 0 , 1 },
  { 0 , 1 },
  { 0 , 1 }
}; 

const int16 ValRange [][] ={

{ 1   ,  500 },
{ 1   ,  250 },
{ 1   ,  100 },
{ 1   ,   99 },
{ 1   ,   99 },
{ 1   ,   99 }, 
{-99  ,   99 }, 
{ 1   ,   99 }, 
{10   ,  150 },
{ 0   ,   50 }, 
{ 50  ,  150 },  
{ 200 ,  5000}, 
{ 1   ,   99 },
{ 1   ,   99 },
{ 1   ,   300},
{ 1   ,   300}
}; 
 

int BuildTrack,BuildCount;
int AntirecoilVertical,AntirecoilHorizontal;
int Edit1,EditT,Edit2,Axe,Head;
define AdsAssist   = 1;                          
define HipAssist   = 2;  
int display_title = TRUE;
int display_black,refresh_OLED,ModMenu,ModEdit,display_EDIT;   
int EntireScript_OnOff = TRUE;  
int show_mesage_time; 
int count_black;                      
int need_to_be_save;                 
int BlinckColor = 3;    
define TimeToShowIntroPicture = 30000;
define X = RX;                                    
define Y = RY;                                    
const string OFF = "OFF";    
const string ON  = "ON";   
const string SCRIPT_ONOFF  = "SCRIPT ON/OFF";   
const int8 ASCII_NUM[] = { 48,49,50,51,52,53,54,55,56,57};                
const string NO_EDIT_VAR1  = "No Edit Variables";
const string NO_EDIT_VAR2  = "for this MOD";   

define ColorOFF  = 0;
define Blue      = 1;
define Red       = 2;
define Green     = 3;
define Pink      = 4;
define SkyBlue   = 5;
define Yellow    = 6;
define White     = 7;
                      
data(                 
  0,0,0, //0. ColorOFF
  2,0,0, //1. Blue     
  0,2,0, //2. Red      
  0,0,2, //3. Green    
  2,2,0, //4. Pink     
  2,0,2, //5. SkyBlue 
  0,2,2, //6. Yellow   
  2,2,2  //7. White    
); // end of data segment-------------- 
// COLOR LED function        
//-------------------------------------------------------------- 
init {  

// MODS

AI_AimAssist           = get_pvar(SPVAR_1,  1,    2,   1);
AI_HipAssist           = get_pvar(SPVAR_2,  1,    1,   1);
HeadShotAssist         = get_pvar(SPVAR_3,  1,    2,   2); 
NonRecoil              = get_pvar(SPVAR_4,  1,    1,   1); 
StickNoDeriva          = get_pvar(SPVAR_5,  1,    1,   1); 
AccuracyExploit        = get_pvar(SPVAR_6,  0,    1,   1); 
BuildTracker           = get_pvar(SPVAR_7,  1,    1,   1); 
QuickEditAssist        = get_pvar(SPVAR_8,  0,    1,   1); 
InstaEditReset         = get_pvar(SPVAR_9,  0,    1,   1); 
InstaFastReset         = get_pvar(SPVAR_10, 0,    1,   1); 
InstantPickaxe         = get_pvar(SPVAR_11, 0,    1,   1);
CrouchShot             = get_pvar(SPVAR_12, 0,    1,   1);
RapidFire              = get_pvar(SPVAR_13, 0,    1,   1);


// VALUES
AimStrength            = get_pvar(SPVAR_14,  1,   99,  27);
HipAssist_Strength     = get_pvar(SPVAR_15,  1,  250,  180);
HipAssist_Speed        = get_pvar(SPVAR_16,  1,  100,  15);
HeadStep               = get_pvar(SPVAR_17,  1,  100,   3);
HeadMax                = get_pvar(SPVAR_18,  1,  100,  30);
AR_Ver                 = get_pvar(SPVAR_19,  1,   99,  25);
AR_Horiz               = get_pvar(SPVAR_20,-99,   99,   0);
DeadZone               = get_pvar(SPVAR_21,  1,   50,  15);
Spam_Accuracy          = get_pvar(SPVAR_22, 50,  100, 100);
BuildSyncTime          = get_pvar(SPVAR_23,400, 4000, 2000);  
EditDelay              = get_pvar(SPVAR_24,  1,   99,  20);
EditHoldTime           = get_pvar(SPVAR_25,  1,   99,  20);
ButtonTime             = get_pvar(SPVAR_26,  1,   99,  20);
DropShotWait           = get_pvar(SPVAR_27,  1,  300,  20);
RapidFireHold          = get_pvar(SPVAR_28,  1,  500,  30);
RapidFireWait          = get_pvar(SPVAR_29,  5,  500,  30);

slot_numb = get_slot();
}

main {
                                  
 
if(get_ival(XB1_LT))
{
     
    if(event_press(PS4_SHARE))
    {
        
         EntireScript_OnOff    = !EntireScript_OnOff;
         blinck(EntireScript_OnOff);
         cls_oled(0);
         draw_rectangle();
         display_mod( center_x(sizeof(SCRIPT_ONOFF)- 1, OLED_FONT_SMALL_WIDTH) ,SCRIPT_ONOFF [0],EntireScript_OnOff ,1);
         show_mesage_time = 2000;

 		 if(!EntireScript_OnOff) set_Virtual_Machine_Speed(VM_Default); 
    }
}
                          
if(show_mesage_time)
{
    show_mesage_time -= get_rtime();
    
    if(show_mesage_time <= 0) 
    {
        cls_oled(0);    
    }
}
                               
if(EntireScript_OnOff) 
{
                   
	if(ModEdit || ModMenu) set_Virtual_Machine_Speed(VM_Default);
    
        if(display_EDIT)
        {                
    	     
            cls_oled(0);                        
        
        if(EditVal[ modName_idx ] == 0 )
        {  
		               
		    line_oled(1,45,127,45,1,0);    
		    print( center_x( 17, OLED_FONT_SMALL_WIDTH ), 20, OLED_FONT_SMALL, 1, NO_EDIT_VAR1[0] ); 
		    print( center_x( 12, OLED_FONT_SMALL_WIDTH ), 33, OLED_FONT_SMALL, 1, NO_EDIT_VAR2[0] ); 
		}                                                                                            
		else 
        {
          display_edit( adjust_variable_idx [adjust_variable_idx + 1]);
          adjust_variable_idx [adjust_variable_idx + 1] = edit_val(adjust_variable_idx [adjust_variable_idx + 1] );
	}
}
    
if(refresh_OLED) 
{ 
       
        cls_oled(0);       
        
        draw_rectangle(); 
          
      
        if(modName_idx == 0)display_mod( center_x(sizeof(AI_AIM_ASSIST)   - 1, OLED_FONT_SMALL_WIDTH ) ,AI_AIM_ASSIST[0] ,AI_AimAssist   ,Options[ modName_idx ]);
        if(modName_idx == 1)display_mod( center_x(sizeof(AI_HIP_ASSIST)   - 1, OLED_FONT_SMALL_WIDTH ) ,AI_HIP_ASSIST[0] ,AI_HipAssist   ,Options[ modName_idx ]);
        if(modName_idx == 2)display_mod( center_x(sizeof(HEADSHOT)        - 1, OLED_FONT_SMALL_WIDTH ) ,HEADSHOT[0]      ,HeadShotAssist ,Options[ modName_idx ]);
        if(modName_idx == 3)display_mod( center_x(sizeof(ANTIRECOIL)      - 1, OLED_FONT_SMALL_WIDTH ) ,ANTIRECOIL[0]    ,NonRecoil      ,Options[ modName_idx ]);
        if(modName_idx == 4)display_mod( center_x(sizeof(DEADZONE)        - 1, OLED_FONT_SMALL_WIDTH ) ,DEADZONE[0]      ,StickNoDeriva  ,Options[ modName_idx ]);
        if(modName_idx == 5)display_mod( center_x(sizeof(ACCURACY)        - 1, OLED_FONT_SMALL_WIDTH ) ,ACCURACY[0]      ,AccuracyExploit,Options[ modName_idx ]);
    	if(modName_idx == 6)display_mod( center_x(sizeof(BUILDTRACKER)    - 1, OLED_FONT_SMALL_WIDTH ) ,BUILDTRACKER[0]  ,BuildTracker   ,Options[ modName_idx ]);            
        if(modName_idx == 7)display_mod( center_x(sizeof(EDITASSIST)      - 1, OLED_FONT_SMALL_WIDTH ) ,EDITASSIST[0]    ,QuickEditAssist,Options[ modName_idx ]):
        if(modName_idx == 8)display_mod( center_x(sizeof(EDITRESET)       - 1, OLED_FONT_SMALL_WIDTH ) ,EDITRESET[0]     ,InstaEditReset ,Options[ modName_idx ]);
        if(modName_idx == 9)display_mod( center_x(sizeof(FASTRESET)       - 1, OLED_FONT_SMALL_WIDTH ) ,FASTRESET[0]     ,InstaFastReset ,Options[ modName_idx ]);
        if(modName_idx == 10)display_mod( center_x(sizeof(INSTANTPICKAXE) - 1, OLED_FONT_SMALL_WIDTH ) ,INSTANTPICKAXE[0],InstantPickaxe ,Options[ modName_idx ]);
        if(modName_idx == 11)display_mod( center_x(sizeof(RAPIDCROUCH)    - 1, OLED_FONT_SMALL_WIDTH ) ,RAPIDCROUCH[0]   ,CrouchShot     ,Options[ modName_idx ]);
        if(modName_idx == 12)display_mod( center_x(sizeof(RAPIDFIRE)      - 1, OLED_FONT_SMALL_WIDTH ) ,RAPIDFIRE[0]     ,RapidFire      ,Options[ modName_idx ]);
         
         refresh_OLED = FALSE; 
    } 


if(display_title) 
{           
            
    cls_oled(0);            
    	      
    DrawLogo(0, 0, 0);
                    
	    ModMenu = FALSE;   
        display_title = FALSE;  
        display_black = TRUE;
                                   
    }                            

if(display_black) 
{                            
    count_black += get_rtime();
        
    if(count_black >= TimeToShowIntroPicture)   
    {                        
        cls_oled(0);         
        count_black = 0;      
        display_black = FALSE; 
    }                         
}                                                               
   
if(ModEdit) 
{      
        block_all_inputs(); 
        
    if(MenuTimeOut)
    {
            
         CheckIfBtnIsPressed();
    } 
       
    if(event_release(XB1_B))
    {
             
        ModEdit      = FALSE;           
        display_EDIT = FALSE;           
        ModMenu      = TRUE;            
        refresh_OLED = TRUE;   
    }                    
                                                                         
    if(!get_ival(XB1_LT) && event_press(XB1_RIGHT))
    {            
                                         
        adjust_variable_idx ++;                 
        	   
        if(adjust_variable_idx > OptRange[ modName_idx ][ 1 ])  adjust_variable_idx = OptRange[ modName_idx ][ 1 ]; 
             
            refresh_OLED = FALSE;      
            display_EDIT = TRUE;        
        }          
                                                                           
    if(!get_ival(XB1_LT) && event_press(XB1_LEFT))
    {  
                                                               
        adjust_variable_idx --;                                      
        
        if(adjust_variable_idx < OptRange[ modName_idx ][ 0 ]) adjust_variable_idx = OptRange[ modName_idx ][ 0 ];
            
            refresh_OLED = FALSE;      
            display_EDIT = TRUE;        
}                                                           
          

if(MenuTimeOut)
{
    CheckIfBtnIsPressed();
        
    }
}          
   
if(get_ival(XB1_LT) && event_press(XB1_MENU))
{  
       
    ModMenu = TRUE;  
    modName_idx  = 0;                   
    refresh_OLED = TRUE;      
    display_EDIT = FALSE;        
    MenuTimeOut  = menu_time_active;
}      
                
if(ModMenu)
{  
    block_all_inputs(); 

    if(event_press(XB1_B))
    {
         
        ModMenu = FALSE;                     
        ModEdit = FALSE;              
        combo_run(MESSAGE);             
    }                    
      
    if(event_press(XB1_A))
    {
         
        ModMenu             = FALSE;   
        adjust_variable_idx = OptRange[ modName_idx ][ 0 ]; 
        ModEdit             = TRUE;   
        display_EDIT        = TRUE; 
      }                                                                     
    if( !get_ival(XB1_LT) && event_press(XB1_RIGHT))
    { 
                                          
        modName_idx ++;                 
        if(modName_idx > MAX_MODS_COUNT) modName_idx = 0; 
        blinck( modName_idx[modName_idx + 1]); 
         
    }                            
    if(!get_ival(XB1_LT) && event_press(XB1_LEFT))
    {  
                                                               
        modName_idx --;                                      
        if(modName_idx < 0) modName_idx = MAX_MODS_COUNT;
        blinck( modName_idx[modName_idx + 1]); 
         
    }                        
        display_black = FALSE;    
        display_title = FALSE;    
 
    if(!get_ival(XB1_LT))
    {    
        if(event_press(XB1_UP))
        { 
            modName_idx[modName_idx + 1] = f_go_back( modName_idx[modName_idx + 1] ); 
            }
            
        if(event_press(XB1_DOWN))
        {
            modName_idx[modName_idx + 1] = f_go_forward( modName_idx[modName_idx + 1] );
        }
    } 
        refresh_OLED = TRUE;   
        set_val(XB1_UP,0); 
        set_val(XB1_DOWN,0); 
        set_val(XB1_LEFT,0); 
        set_val(XB1_RIGHT,0); 
        
        if(MenuTimeOut)
        {
        CheckIfBtnIsPressed();
    }
} 
   
if(!ModEdit && !ModMenu)
{
    combo_run(Blink_MOD_ON);          
				


if(time_to_clear_screen)
{               
    time_to_clear_screen -= get_rtime();
        
        if(time_to_clear_screen <= 0 )
        {     
        
        QT_MESSAGE_TIMEOUT(); 
    }
}

if(StickNoDeriva) 
{ 
            
    RemoveStickNoise();
}
 

if(QuickEditAssist) 
{
	 	
	if(get_ival(EditAssist)) 
	{
			
		EditAssist();
		Edit1 = On;
	}

	if(event_release(EditAssist)) 
	{
			
		EditT = 0;	
		Edit1 = Off;
	}
} 

if(InstaFastReset) 
{
    if(event_press(FastReset)) 
    { 
       	
        combo_run(FastReset);
    }
}	
    
if(InstaEditReset) 
{
    if(EditHold) 
    {
        	
        if(get_ival(Edit) && get_ptime(Edit) > EditHoldTime) 
        {
        
            Edit1 = On;
            Edit2 = On;
		}
    }
        	
        else if (event_press(Edit)) 
        {
        			
        	Edit1 = On;
            Edit2 = On;
		}
		
	if(Edit2) 
	{
        if(event_release(Select)) 
        {  
                
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
        }
	}
}

if(Edit1 || Edit2) 
{
        
    if(event_press(Reset)) 
    {  
            
        combo_run(InstantReset);
            
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
    }

    if(event_press(Pickaxe)) 
    {
            
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
	}
}
			
if(BuildTracker) 
{
        
    if(event_press(Build)) 
    {
            
        BuildTrack = !BuildTrack;
    }
    
    if(BuildTrack) 
    {
            
            BuildCount += get_rtime();
            
    if(event_press(Pickaxe) || BuildCount == BuildSyncTime) 
    {
                
            BuildTrack = FALSE;
            BuildCount = 0;
        }
            
        if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(Trap)) 
                
            BuildCount = 0;
    }
}
	
if (!BuildTrack && !Edit1 && !Edit2) {
			
	
if(InstantPickaxe) 
{
                    
    if(event_press(Pickaxe)) 
    {
                        
      Axe = On;
    }
                	
      if(Axe){
                        
        if(event_press(Build) || event_press(Switch) || event_press(AdsBtn) || event_press(N_Weapon) || event_press(P_Weapon)) { 
                            
           Axe = Off;
      }
                        
        if(event_release(FireBtn)) 
        {
			combo_run(Pickaxe);
           }
      }
 }

if(HeadShotAssist) 
{
			
	if(get_ival(AdsBtn) && get_ival(FireBtn) || (HeadShotAssist == HipAssist && get_ival(FireBtn))) 
    {
		if (abs(get_ival(RY)) < HeadMax) 
		{ 			
            Head += HeadStep;
			combo_run(HeadAssist_cmb);
		}	
	}             
		if (!get_ival(FireBtn)) Head = 0;
				
		if (Head >= HeadMax) combo_stop(HeadAssist_cmb);
}
		    
if(NonRecoil) 
{
    if(get_ival(AdsBtn) && get_ival(FireBtn)) 
    {
        combo_run(AntiRecoil);
	}
}   		  

if(AccuracyExploit) 
{
	if(event_press(FireBtn) && !get_ival(HoldButtonStopAccuracy)) 
    {
        combo_run(Accuracy100);
    }
}

if(get_ival(ToggleHold) && event_press(TogglePress)) 
{
        
    CrouchShot = !CrouchShot;
    }
    
        if(CrouchShot) 
        {
         
        if(get_ival(FireBtn) && !get_ival(HoldButtonStopCrouch)) 
        
        	combo_run(RapidCrouch);
    
         	} else {
             
         	combo_stop(RapidCrouch);
    }
  

if(get_ival(ToggleHoldFire) && event_press(TogglePressFire)) 
{
    RapidFire = !RapidFire;}
	
	  if((RapidFire && RapidFireHip && get_ival(AdsBtn) && get_ival(FireBtn)) || (RapidFire && !RapidFireHip && get_ival(FireBtn)))
	  {
            combo_run(RapidFire);
        
        } else {
                
            combo_stop(RapidFire);
}

if(AI_HipAssist)
{
         	   
	   if(abs(get_ival(XB1_LX)) <= 90 && abs(get_ival(XB1_LY)) <= 90)
               
               combo_run(HipAssist);         	        	       
      
       if(get_ival(AdsBtn) || get_ival(FireBtn) || (get_ival(XB1_X) || get_ival(HoldButtonStopAccuracy))) 
        
        	   combo_stop(HipAssist);    
       }
  

if(AI_AimAssist) 
{
	
	if(AI_AimAssist == 1) { // Linear
                
        if(get_ival(AdsBtn)  && abs(get_ival(LX)) <= 70 && abs(get_ival(LY)) <= 70) combo_run(AimAssistLinear); 
        if(get_ival(FireBtn) && abs(get_ival(LX)) <= 70 && abs(get_ival(LY)) <= 70) combo_run(AimAssistLinear); 
    }
   
    if(AI_AimAssist == 2) { // Exponencial
             
        if(get_ival(FireBtn) || get_ival(AdsBtn)) combo_run(AimAssistExpo); 
                
    			}
			 }
		  }
	   }
	}
}

///////////////////////////////////////////////////////////////////////////// 
///                             COMBO BLOCK                               ///                             
/////////////////////////////////////////////////////////////////////////////
     
combo  AimAssistLinear 
{
    set_val(LX,-100 + get_ival(LX));
    wait(AimStrength);
    set_val(LX,100 + get_ival(LX));
    wait(AimStrength);
}

combo AimAssistExpo 
{
    set_val(RY,AxisRelease(RY,AimStrength));
    wait(9);
    set_val(RX,AxisRelease(RX,AimStrength));
    set_val(LX,AxisRelease(LX,AimStrength));
    wait(9);
    set_val(RY,AxisRelease(RY,AimStrength));
    wait(9);
    set_val(RX,AxisRelease(RX,inv(AimStrength)));
    wait(9);
    set_val(RX,AxisRelease(RX,inv(AimStrength)));
    set_val(LX,AxisRelease(LX,inv(AimStrength)));
    wait(9);
}

combo HipAssist 
{

	offset(PS4_LX,HipAssist_Strength);
	wait(HipAssist_Speed);
	offset(PS4_LY,inv(HipAssist_Strength));
	wait(HipAssist_Speed);
	offset(PS4_LX,inv(HipAssist_Speed));
	wait(HipAssist_Speed);
	offset(PS4_LY,HipAssist_Strength);
	wait(HipAssist_Speed);
}

combo Accuracy100 
{
    set_val(AdsBtn,100);
    wait(Spam_Accuracy);
}

combo AntiRecoil 
{
    AntirecoilVertical = get_val(PS4_RY) + AR_Ver;  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(AR_Ver) +  5)
    set_val(PS4_RY, (AntirecoilVertical));
    AntirecoilHorizontal = get_val(PS4_RX) + AR_Horiz;
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(AR_Horiz)  + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}

combo RapidCrouch 
{
	set_val(Crouch,100);
	wait(DropShotWait);
	set_val(Crouch,0);
	wait(DropShotWait);
}

combo RapidFire 
{
    set_val(FireBtn,100);
    wait(RapidFireHold);
    set_val(FireBtn,0);
    wait(RapidFireWait);
}

combo HeadAssist_cmb
{
	set_val(RY,inv(Head) + get_ival(RY));
}                                                

combo FastReset 
{
    set_val(EditAssist,100);
    wait(ButtonTime)
    set_val(Reset,100);        
    wait(ButtonTime);
    combo_run(Confirm);
}

combo Confirm 
{
    set_val(Confirm,100);
    wait(ButtonTime);
    set_val(Confirm,0);
    wait(ButtonTime);
}

combo InstantReset 
{
    wait(20)
    combo_run(Confirm);
}

combo Pickaxe 
{
    set_val(Pickaxe,100);
    wait(ButtonTime);
    Axe = Off;
}

int exit_wait = 1500;
combo EXIT 
{     
	wait(exit_wait);     
	cls_oled(0);    
	ModMenu = FALSE;  
	ModEdit = FALSE;    
	display_EDIT  = FALSE; 
	display_title = TRUE; 
}  

combo MESSAGE 
{       
    wait(20);         
    save_toggles ();  
    cls_oled(0);      
    print(horizontal_center_offset(sizeof(EXIT_TXT1), OLED_FONT_MEDIUM ), 2, OLED_FONT_MEDIUM, 1, EXIT_TXT1[0]); 
    print(horizontal_center_offset(sizeof(EXIT_TXT2), OLED_FONT_MEDIUM ), 23, OLED_FONT_MEDIUM, 1, EXIT_TXT2[0]);
    exit_wait = 2000;     
}                        
    
combo BLINK_NOTIFY 
{        
	colourled(BlinckColor);   
	wait(300);                 
	colourled(ColorOFF);        
	wait(100);                  
	colourled(BlinckColor);      
	wait(300);                   
	colourled(ColorOFF);          
}                                

int blink_n ;
combo Blink_MOD_ON   
{
    colourled(Blue);
    wait(500);                 
    colourled(Blue);  
    blink_n +=1; 
    if( blink_n > 0)blink_n = 1; 
}                                
  
// FUCTIONS
//-------------------------------------------------------------------------------------------
function RemoveStickNoise() 
{
  if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= DeadZone) {
    set_val(PS4_LX,0);
    set_val(PS4_LY,0);
  }

  if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) <= DeadZone) {
    set_val(PS4_RX,0);
    set_val(PS4_RY,0);
  }
}

function EditAssist () 
{
    EditT += get_rtime();
        
        if (get_ival(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
           		EditPress(Select);
        }
}

function EditPress (Button) 
{
    if (get_ival(Button))
        
   		return;
            
        set_val(Button,100);
}

function offset(int axis, int offset_val) 
{
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return 
}

function AxisRelease(AxisXY,AxisVal) 
{
    if (abs(get_ival(AxisXY)) <= AimStrength) 

        return AxisVal;
        return get_ival(AxisXY);
}

int time_to_clear_screen;
function QT_MESSAGE_TIMEOUT ()
{              
	cls_oled(0);    
	display_title  = FALSE;           
}    

function calculate(int v, int lo, int hi) 
{ 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
 
define FONT_STATS_INDEX_WIDTH    = 0; 
define FONT_STATS_INDEX_HEIGHT   = 1; 
define FONT_STATS_INDEX_MAXCHARS = 2;                                     
                                      
function horizontal_center_offset(number_characters, font_size) 
{ 
    return (128 - number_characters * FONT_STATS[font_size][FONT_STATS_INDEX_WIDTH]) / 2;
}             
              
int data_indx;
function colourled(color) 
{  
    for( data_indx = 0; data_indx < 3; data_indx++ ) {
        set_led(data_indx,duint8 ((color * 3) + data_indx));
    }
}

function a_f(p,m) 
{
	if(abs(get_val(p)) < 12)
	return m;
	return get_val(p);
} 

const string EXIT_TXT1 = "Settings";  
const string EXIT_TXT2 = "Was Saved"; 
                                     
function save_toggles () {  
                    
    // Mods
    set_pvar(SPVAR_1,  AI_AimAssist);
    set_pvar(SPVAR_2,  AI_HipAssist);
    set_pvar(SPVAR_3,  HeadShotAssist); 
    set_pvar(SPVAR_4,  NonRecoil); 
    set_pvar(SPVAR_5,  StickNoDeriva); 
    set_pvar(SPVAR_6,  AccuracyExploit);
  	set_pvar(SPVAR_7,  BuildTracker);
    set_pvar(SPVAR_8,  QuickEditAssist);
    set_pvar(SPVAR_9,  InstaEditReset);
    set_pvar(SPVAR_10, InstaFastReset);
    set_pvar(SPVAR_11, InstantPickaxe);
    set_pvar(SPVAR_12, CrouchShot);             
    set_pvar(SPVAR_13, RapidFire);              
     
     // Values

    set_pvar(SPVAR_14, AimStrength); 
    set_pvar(SPVAR_15, HipAssist_Strength);     
    set_pvar(SPVAR_16, HipAssist_Speed); 
    set_pvar(SPVAR_17, HeadStep); 
    set_pvar(SPVAR_18, HeadMax); 
    set_pvar(SPVAR_19, AR_Ver); 
    set_pvar(SPVAR_20, AR_Horiz); 
    set_pvar(SPVAR_21, DeadZone);
    set_pvar(SPVAR_22, Spam_Accuracy);
 	set_pvar(SPVAR_23, BuildSyncTime);   
    set_pvar(SPVAR_24, EditDelay);
    set_pvar(SPVAR_25, EditHoldTime);
    set_pvar(SPVAR_26, ButtonTime);
    set_pvar(SPVAR_27, DropShotWait);
    set_pvar(SPVAR_28, RapidFireHold);
    set_pvar(SPVAR_29, RapidFireWait);
     
    combo_run(EXIT);                  
      
}
                      
//-- VM Speed
define VM_Default = 0;
function set_Virtual_Machine_Speed (f_speed)
{
    if     (f_speed == 0) vm_tctrl(-0);//10 ms Default
    else if(f_speed == 1) vm_tctrl(-2);// 8 ms
    else if(f_speed == 2) vm_tctrl(-4);// 6 ms
    else if(f_speed == 3) vm_tctrl(-6);// 4 ms
    else if(f_speed == 4) vm_tctrl(-8);// 2 ms
    else if(f_speed == 5) vm_tctrl(-9);// 1 ms
}
                       
function blinck ( var)
{  
	if(var){               
		BlinckColor = Green;
	}else{                 
		BlinckColor = Red;    
	}                       
	combo_run(BLINK_NOTIFY); 
}                           
                            
const uint8 FONT_STATS[][] = {  
    {  7, 10, 18 }, // Small    
    { 11, 18, 11 }, // Medium   
    { 16, 26,  7 }  // Large    
};                              
                                
function display_edit(  f_val) 
{
    print(2, 3, OLED_FONT_SMALL, OLED_BLACK, EditVarStr[adjust_variable_idx]); 
    number_to_string(f_val, find_digits(f_val));     
}     
        
function f_go_forward (f_variable) 
{
    f_variable       +=1;   
    if(f_variable  > Min_Max_Options[modName_idx][1] )f_variable  = Min_Max_Options[modName_idx][0]; 
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}

function f_go_back (f_variable) 
{
    f_variable       -=1;   
    if(f_variable  < Min_Max_Options[modName_idx][0] )f_variable  = Min_Max_Options[modName_idx][1]; 
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}

int ssss;                            
int c_c_c,c_val;   
function number_to_string(f_val,f_digits) 
{                  

    ssss = 1;  c_val = 10000;                            
                                                      
    if(f_val < 0)                      
    {                                                 
         putc_oled(ssss,45);       
         ssss += 1;                                      
         f_val = abs(f_val);                          
    }                                                 
                                                      
    for(c_c_c = 5; c_c_c >= 1; c_c_c--)                           
    {                                                 
        if(f_digits >= c_c_c)                             
        {                                             
            putc_oled(ssss,ASCII_NUM[f_val / c_val]);    
            f_val = f_val % c_val;                    
            ssss +=  1;                                  
            if(c_c_c == 4)                               
            {                                         
                putc_oled(ssss,44);          
                ssss += 1;                               
            }                                        
        }                                             
        c_val /= 10;                                  
    }                                                
    puts_oled(center_x(ssss - 1,OLED_FONT_MEDIUM_WIDTH),27,OLED_FONT_MEDIUM,ssss - 1,OLED_BLACK); 
}                                                     

int n_str_;                  
int horiz_X_center_sufix;    
function print_number(f_val,f_digits ,print_s_x , print_s_y , f_font) 
{ 
                                                      
    n_str_ = 1;  c_val = 10000;                       
                                                      
    if(f_val < 0)                     
    {                                                 
        putc_oled(n_str_,45);    
        n_str_ += 1;                                 
        f_val = abs(f_val);                          
                                                      
    }                                                 
                                                      
    for(c_c_c = 5; c_c_c >= 1; c_c_c--)                           
    {                                                 
        if(f_digits >= c_c_c)                             
        {                                              
            putc_oled(n_str_,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;                    
            n_str_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_WHITE); 
}                                                                                             
                                                      
int f_min, f_max;
define Y_Arrow = 36;
const string EDIT_VALUE_TXT = "Hold LT/L2 +"; 
function edit_val( f_val) 
{  
    line_oled(1,14,127,14,1,1);                                        
    line_oled(1,48,127,48,1,1); 
     
    print( 2, 52, OLED_FONT_SMALL, 1, EDIT_VALUE_TXT[0] ); 
    rect_oled(90, 50, 127, 60, OLED_WHITE , col_rec_left); 
    putc_oled(1,LEFT_arrow); 
    puts_oled(91, 51, OLED_FONT_SMALL, 1, col_char_left);     
    putc_oled(1,RIGHT_arrow); 
    puts_oled(101, 51, OLED_FONT_SMALL, 1, col_char_right);
    
    putc_oled(1,UP_arrow); 
    puts_oled(111, 51, OLED_FONT_SMALL, 1, col_char_left);     
    putc_oled(1,DOWN_arrow); 
    puts_oled(121, 51, OLED_FONT_SMALL, 1, col_char_right);
    
    f_min = ValRange[adjust_variable_idx][0];                          
    f_max = ValRange[adjust_variable_idx][1];  
     
    print_number(f_min ,find_digits(f_min) ,4 , 20 , OLED_FONT_MEDIUM); 
    print_number(f_max ,find_digits(f_max) ,97 , 20 , OLED_FONT_MEDIUM);
                                          
    if(get_ival(XB1_LT))
    {                  
        if(press_hold(PS4_RIGHT)){            
            f_val ++;                           
            if(f_val > f_max ) f_val = f_max;   
            display_EDIT = TRUE;                
            need_to_be_save = TRUE;             
        }                                     
                                          
        if(press_hold(PS4_LEFT))
        {             
            f_val --;                           
            if(f_val < f_min ) f_val = f_min;   
            display_EDIT = TRUE;                
            need_to_be_save = TRUE;             
        }                                     
        if(press_hold(PS4_UP))
        {               
            f_val +=10;                         
            if(f_val > f_max ) f_val = f_max;   
            display_EDIT = TRUE;                
            need_to_be_save = TRUE;             
        }                                     
                                          
        if(press_hold(PS4_DOWN))
    {             
            f_val -=10;                         
            if(f_val < f_min ) f_val = f_min;   
            display_EDIT = TRUE;                
            need_to_be_save = TRUE;             
        }                                     
    }                                      
    return f_val;                        
}      
                                             
function press_hold(f_btn) 
{       

	  return event_press(f_btn) || get_ival(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}               
                
function find_digits(f_num) 
{                         
                                                 
    f_num = abs(f_num);                               
    if(f_num / 10000 > 0) return 5;                   
    if(f_num /  1000 > 0) return 4;                   
    if(f_num /   100 > 0) return 3;                   
    if(f_num /    10 > 0) return 2;                   
                          return 1;                  
}                                                     
                              
function center_x(f_chars,f_font) 
{           
                                                    
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}                                                      
                                                       
function draw_rectangle()        
{
    rect_oled(0, 0,OLED_WIDTH,64,FALSE,1); 
    line_oled(1,14,127,14,1,1); 
    line_oled(1,48,127,48,1,1); 
}

const string ModOption_67_0 = "OFF"; 
const string ModOption_67_1 = "Head Assist"; 
const string ModOption_67_2 = "Hip Assist"; 

define ShotModOptions = 31;
define FireModOptions =  9;

const string ModOption_31_0 = "OFF"; 
const string ModOption_31_1 = "Linear"; 
const string ModOption_31_2 = "Exponential"; 
const string ModOption_31_3 = "Ads Only"; 
const string ModOption_31_4 = "On Fire"; 

define UP_arrow = 131; 
define DOWN_arrow = 132; 
define LEFT_arrow = 133; 
define RIGHT_arrow = 134; 
define TRIANGLE_txt = 130; 
define Y_txt = 89; 
define CROSS_txt = 127; 
define A_txt = 65;
int col_char_left; 
int col_char_right;
int col_rec_left = 1;
int col_rec_right = 1;
define SINGLE     = 21;
define ROW_1      = 21;
define ROW_2      = 33;
define ROW_3      = 17;
const string NO_EDIT_VARIABLE =" No Edit Variable";
const string PRESS_A_TO_EDIT  =" A/CROSS to Edit ";
const string MOD_LABEL        ="MOD:";
const string SLOT_LABEL       ="MSL:";
int slot_numb ;
function display_mod( f_string, mod_name, f_toggle, f_option) 
{   
                                      
        print(f_string, 3, OLED_FONT_SMALL, OLED_BLACK, mod_name); 
        print( 2,38,OLED_FONT_SMALL, OLED_WHITE, MOD_LABEL[0]); 
        print_number(modName_idx + 1 ,find_digits(modName_idx + 1) ,28 , 38 , OLED_FONT_SMALL);
        print( 84,38,OLED_FONT_SMALL, OLED_WHITE, SLOT_LABEL[0]); 
        print_number(slot_numb ,find_digits(slot_numb) ,112 , 38 , OLED_FONT_SMALL); 
                                                       
        rect_oled(55, Y_Arrow, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, col_rec_left); 
        rect_oled(63, Y_Arrow, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, col_rec_right);
        
        putc_oled(1,DOWN_arrow); 
        puts_oled(56, 37, OLED_FONT_SMALL, 1, col_char_left);     
        putc_oled(1,UP_arrow); 
        puts_oled(64, 37, OLED_FONT_SMALL, 1, col_char_right);
                                                               
		if(EditVal[ modName_idx ] == 0 ){ 
			print( 2, 52, OLED_FONT_SMALL, 1, NO_EDIT_VARIABLE[0] ); 
		}else{
			print( 2, 52, OLED_FONT_SMALL, 1, PRESS_A_TO_EDIT[0] ); 
        }
        if(f_option == 1)                              
        {                                                     
                                      
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ON)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3 ,OLED_FONT_MEDIUM,OLED_WHITE, ON[0]);// Enable 
            else                                                                                               
                print(center_x(sizeof(OFF) - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3 ,OLED_FONT_MEDIUM,OLED_WHITE,OFF[0]);// Disable 
        }            
        if(f_option == ShotModOptions)// 31    
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_31_0)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3 ,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_31_1)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3 ,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_31_2)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3 ,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_2[0]);// ADS & Fire
                                                                                                                           
            if(f_toggle == 3)                                                             
                print(center_x(sizeof(ModOption_31_3)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3 ,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_3[0]);// ADS Only
                                                                                                                           
        }            
        if(f_option == FireModOptions)// 9 FireModOptions   
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_31_0)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_31_1)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_31_2)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_2[0]);// ADS & Fire
                                                                                                                 
            if(f_toggle == 3)                                                             
                print(center_x(sizeof(ModOption_31_4)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_4[0]);// On Fire
                                                                                                                 
        }         

         if(f_option == 67)   
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_67_0)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_67_1)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_1[0]);// Head Assist
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_67_2)  - 1, OLED_FONT_MEDIUM_WIDTH),ROW_3,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_2[0]);// HHip Assist                                                                                                                                                                                                                                                  
         
        }            
}         

const int16 BOOT_LOGO[] = { 

117, 62,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0006,0x01FF,0x3019,0xF03F,0x03F0,0x3830,0x0000,0x0000,0x300F,0xF9C1,0x8F87,0xFC3F,0xC1C1,0x8000,0x0000,0x0180,0x6006,0x1830,0x7063,0x870F,0x0C00,0x0000,0x000C,0x0300,
    0x18C1,0x8300,0x381C,0x7860,0x0000,0x0000,0x6018,0x00CC,0x0C38,0x0180,0x6363,0x0000,0x0000,0x0300,0xFF83,0xC061,0x800C,0x031B,0x9800,0x0000,0x0018,0x07FC,0x0E03,0x0C00,0x6018,0xCCC0,0x0000,0x0000,0xC030,0x0070,0x1860,0x0300,
    0xC676,0x0000,0x0000,0x0601,0x8007,0x80C3,0x0018,0x0631,0xB000,0x0000,0x0030,0x0C00,0x6606,0x1800,0xC031,0x8F80,0x0000,0x0001,0x8060,0x0338,0x3060,0x0703,0x8C3C,0x0000,0x0000,0x0C03,0x0030,0xC183,0x811C,0x3860,0xE000,0x0000,
    0x007F,0x9FF3,0x031F,0x0FF8,0x7F83,0x0700,0x0000,0x0003,0xFCFF,0x981C,0xF83F,0x81F8,0x1818,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0180,0x63F0,0x0000,0x0000,0x0000,0x0000,0x0000,0x000C,0x0630,0xC000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3033,0x0600,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0183,0x9C30,0x0000,0x0000,0x0000,0x0000,0x0000,0x000C,0x1871,0x8000,0x0000,0x0000,0x0000,0x0000,0x0000,0x30C1,0xF800,0x0000,0x0000,0x0000,0x0000,0x0000,0x018C,0x1FC0,0x0000,0x0000,0x0000,0x0000,0x0000,0x000E,0x61C7,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x330C,0x1C00,0x0000,0x0000,0x0000,0x0000,0x0000,0x01B0,0x60E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x000F,0x8306,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3C0C,0x7000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x01C0,0x7F00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0060,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x319D,0x222E,0xD480,0x2382,0x7000,0xCF74,0xE4B8,0x0252,0x8D1B,0x46A4,0x8104,0x1102,0x0949,0x28B5,0x0012,0x9668,0xFB2D,0x2008,0x6488,0x104A,0xC945,0xAE00,0x9722,0xC551,0x6900,0x4624,0x43E2,
    0x5C4A,0x2B10,0x04A1,0x1622,0x8979,0x0220,0x2204,0x1282,0x515A,0x8019,0x0EB1,0x1749,0x801D,0xC1D0,0x2064,0x1272,0x5C00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x776E,0x9DC2,0x00E9,0x747A,0xE570,
    0x0000,0x0000,0x022A,0x56AB,0x1D44,0x32A2,0x5229,0x0000,0x0000,0x0011,0xDBA7,0x48AA,0x319D,0x1291,0xC800,0x0000,0x0000,0x8C95,0x2245,0x610C,0x8894,0x8440,0x0000,0x0000,0x0756,0xADDC,0x390E,0x9477,0xA422,0x0000,0x0000,0x0000,
    0x0000,0x0010,0x0000,0x0000,0x0000,0x0000
 }

int logoX,logoX2,logoY, logoY2;                       
int logoBit,logoOffset,logoData;                      
                                                      
function DrawLogo(x, y, invert) 
{                     
    logoOffset = 2;                                    
    logoBit = 16;                                           
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) 
    {        
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) 
        {     
            logoData = BOOT_LOGO[logoOffset]          
            logoX2 = x + logoX;                       
            logoY2 = y + logoY;                       
            if (logoX2 < 0 || logoX2 >= 128) 
            {        
                logoX2 -= 128;                        
            }                                         
            if (logoY2 < 0 || logoY2 >= 64) 
            {         
                logoY2 -= 64;                         
            }                                         
            if (test_bit(logoData, logoBit - 1)) 
            {     
                pixel_oled(logoX2, logoY2, !invert);   
            }else{                                     
                pixel_oled(logoX2, logoY2, invert);    
            }                                            
            logoBit--;             
            if (!logoBit) 
            {   
                logoBit = 16;     
                logoOffset++;     
            }  
        }   
    }    
}     
      
const uint8 MenuButtons [] = {  
  XB1_UP ,   //0. Up
  XB1_DOWN , //1. Down
  XB1_LEFT , //2. go back
  XB1_RIGHT ,//3. go forward
  XB1_A ,    //4. enter in Edit Menu
  XB1_B ,    //5. exit  Menu
  XB1_MENU , //5. enter in  Menu
  XB1_LT     //6. hold ADS
};//--- End Menu Buttons  

int menu_btn_indx;
int MenuTimeOut;
define menu_time_active = 30000;
function CheckIfBtnIsPressed (){  
    for(menu_btn_indx = 0; menu_btn_indx < 7; menu_btn_indx++)
    {
         if(event_press(MenuButtons[menu_btn_indx]) )
         {
             MenuTimeOut = menu_time_active;
         }
         if(MenuTimeOut)
         {              
            MenuTimeOut -=1;
            if(MenuTimeOut <= 0 )
            {    
                ModMenu = FALSE;      
                ModEdit = FALSE;      
                display_EDIT  = FALSE; 
                display_black = TRUE; 
            }
        }
    }
}

/*
 . 'oxlc:. .  .cc.    ..  .. ..  .:ko. ''....      ...  .'..,,'. .... ..,.....,.....;;..c:...'.   ...
  .;,'c:.    .;;.    .'  .. ..   ':'  ,,......   .;'.. ...':;,.        ...''.'..'''c:...'.....  .'..
  .:;.:l,..  'lc..   ..  ',...  .,l:. .......     ......'...,;.  ....  ....''::.  .;;. .,,..'.  .,;,
  .cc';c'.   .;.     ''..,,...  .':,.            ...........:c'  ..........',;:....,:..''.. ..  .,'.
  .,c;:l,.   .:;.    ..'.',...                  ..''''''.....    ...  ........'..''::..,,'..'.  .''.
  'lo:;,..   .,,.    ....,,..                  .'''''''''',''...  ........'.,ll',,.,;..;,....   .','
  .c:'''. .  .;c'    ....;,.           .      .'''''''''''',,,,,'...  .  .',,:c..'.'' ......'.    ..
  .:'     .  .,:'    .....       .....''......''''''''''''''''',,,''..  ....,oo'.. ..      .'.  ....
  .;:,,,..   .,,.    ..        ..'''''''''''''''''''''''''''''''',,'''..  . .::....;;. .......   ...
  .lo::;'.   .:;.    ..       ..''''''''''''''''''''''''''''''''''',,'''.   .c:.,;.;:..;,...'.  .',.
  .;xo::;..  .,:'             .''''''''''''''''''''''''''''''''''''',,,''..  ...',.,;..cc,....  .',,
   ;dl:;. .  .;:.             .'''''''''''''''''''''''''''''''''''''''''''.. .;..'.',..::.....  .,'.
  .;c;c;.    .';.             .''''''''''''''''''''''''''''''''''''''''''''. .'..''::. ''.....   ...
  .:. ...    .cc.       .     .''''''''''''''''''''''''''''''''''''..'''''''. .......    ...'.  .','
  ..  ...    .;,.      .'.    .''''''''''''''''''''''''''''.....'..  ...''','.  ...'.    .....  .''.
  ..  ....   .;,.      ...    ..'....''''''''.''''.......       ..     ..''''.  ....'.   .....   ...
  .'. ';,..  .,'      ...                ...   .                        ..'''.. .'.,,.  .'....   ...
. .,. ';...  ..      .'.           ...                                   ..'''..  .,;.   ....    ';,
  .;. ''..   ..     .'..         .,;;;;;;,,''.....      ...',,;:'         ..''''. .,;.   .      .;,.
  .'..;,. .  .     ..'.         .:ccllooooooooollllccccccloolcccc;.        .''''. .:c.    ....  .,'.
      ,:'..       ..''.        'ccloddxddddddddddddddddddddxxdoooll;.       .''''..':.   .....  .;;'
  ... ;c'...      .''.       .:lllodxxxxxxxxxxxxxxxxxxxxxxxkkkxxddooc,.      .''''..;'  ....,.  ....
  .:. ':;..       .'.       .,:codxxxxxxxxxxxxxxxxxxxxxxxxxkkkkxxxdoc;.      ..''''...  .'....      
. 'o, .,...      .'..      ..   .';cdxxxxxxxxxxxxxxxxxxxkkkkkxdoc;'.         .'''',.     ....    ...  
       .'.       ...     .o0Kx'     .,cdxxxxxxxxxxxxxxkkkkkdc,..    ..       ..''','.    .. ..  .''.
      .,..      .'.      'OWMX:        .,lxxxxxxxxxxxxkkko;.       ,kd.        ..'',.    .. ..  ....   CREATED BY EXPLOIT YT
      .'.       ..      ...:l;           .;oxxxxxxxxxxxd;.          ..           ..',.     ...    ..
      ,;.               .. .,.             .lxxxxxxxxxl.                           .''.   ..'.    ..         FORTNITE 
      .,.                .'.,:;.            .ldxxddddc.            .'.              .'.  . .'.  ...'
      ';.                 ,;'.,,.           .:ddddool'  .        .cl;.               .,. ...'.  .,,'
      .;.                 .;c;,..         .':odxxddol:'.         ..',,.              .,. ...'.  .,,'
      ..                   .:c::::;,'''',:looddxxxxdolcc:,'....',;lo:.               .,.  ..'.  .''.
                            .clcclllllloooddxxxxxxxxddooooooooooodo;                 .'.    .   ....
                             .colloddddxxxxxxxxxxxxxxxxxddxxxxxdxl'                  ..         .;,.
                              .;llloddxxxxxxxoc;,,,:oxxxxxkkkkxd:.                   .          ....
.                               .:lloddxxxxdl.      .cxxxxkkkdc'                    ..          .''.
                                  ,coooddxdo:,'',,,,;cdxxxxdc'                     ..           .,'.
                                   .,cloddddolccccclodddxo:.                      .             .',.
      .'                             ..:loddddddoodddddl;.                                  .   .',.
      ,c.                               .':ldxxxxxxdo:'                                     ..   . .
      .'.                                  ..;cll:,'.                                       ..  ..  
.     .;,.                                                                               .. ..  ....
      .,'.                                                                               .  .   .;:'
.     .,'.                                                                 .''.         ..       ...
      ..                                                   .            ..''..         .''....  ....
      ..                                        ............         ..''..          ..'',,'.   ... 
                                            ..'''''''''''.        ......            .''''',,,.. .;;.
           ...        .....                  .''''''''''..     .....                .'''''',,''...'.
         ..'''.         .''...          .....''''''''''''............               ..'''''',,''. ..
        ..'''''..        ..'''...     ..'''''''''''''''''''......'''...             ..''''''',,''.  
       .'''''''''.         ...''''.... .''''''''''''''''''''''''''''''.....          .''''''',,,''. 
 ..   .'''''''''''..         .''''''''''''''''''''''''''''''''''','''''''..          .'''''''',,''..*/
                 